MARGIN = 1,
FUN = function(r){
r[1] + adj_TB(r[2], 7) + adj_TB((99.0-abs(r[3]-fp_str)), 9)
}),
ties.method = 'min')
View(pool_ranks)
pool_ranks <- pool_ranks[order(pool_ranks$Entry_Rank),]
pr <- update_pool_ranks(trny_ranks, pool_entries)
View(pr)
sum(is.na(pr))
optim_info <- optimx(stroke_delta,
simulate_pool_change,
cur_trny_pos = cur_trny_pos,
cur_trny_strokes = cur_trny_strokes,
entry_name = entry_name,
method = 'nmkb',
lower = lower,
upper = upper)
entry_name <- 'Cage to the Face'
est_bound <- T
lb <- 3
ub <- 3
cur_trny_pos <- suppressWarnings(get_trny_pos(id_num))
cur_trny_pos <- subset(cur_trny_pos, `To Par` != 'CUT')
cur_trny_strokes <- as.integer(gsub('E', '0', cur_trny_pos$`To Par`))
# Establish parameters for optimization function
stroke_delta <- rep(0, length(cur_trny_strokes))
# Determine upper and low bounds based on holes through
if(est_bound){
lower <- -ceiling((lb/18) * (72 - as.integer(cur_trny_pos$THRU)))
upper <- ceiling((ub/18) * (72 - as.integer(cur_trny_pos$THRU)))
}else{
lower <- rep(-lb,length(stroke_delta))
upper <- rep(ub,length(stroke_delta))
}
lower
upper
View(cur_trny_pos)
cur_trny_pos <- suppressWarnings(get_trny_pos(id_num))
View(cur_trny_pos)
url <- paste('http://espn.go.com/golf/leaderboard?tournamentId=', id_num, sep = '')
html_text <- GET(url)
html_text <- content(html_text, as = 'text')
parsed_html <- htmlParse(html_text, asText = TRUE)
pos_header <- xpathSApply(parsed_html, '//*[(@id = "regular-leaderboard")]//th', xmlValue)
pos_header <- make.names(pos_header)
pos_table <- xpathSApply(parsed_html, '//*[(@id = "regular-leaderboard")]//td', xmlValue)
# Get finish results
# Check for and remove projected cut and cut information
if(length(grep('Cut:', pos_table)) > 0){
cut_idx <- grep('Cut:', pos_table)
proj_cut <- pos_table[cut_idx]
proj_cut <- unlist(str_split(proj_cut, ': '))
proj_cut_stroke <- proj_cut[2]
pos_table <- pos_table[-cut_idx]
}else{
cut_idx <- NA
}
# Form table
pos_table <- data.frame(matrix(data = pos_table,
ncol = length(pos_header),
byrow = T),
stringsAsFactors = F)
names(pos_table) <- pos_header
# Check is tournament is ongoing and Adjust THRU stat
if("THRU" %in% pos_header == F){
trn_ongoing <- F
pos_table$THRU <- 72
day_fin <- 'F'
}else{
trn_ongoing <- T
day_fin <- 0
}
if("TODAY" %in% pos_header == F){
pos_table$TODAY <- '-'
}
# Subset Table
pos_table <- pos_table[,c('PLAYER',
'POS',
'THRU',
'TO.PAR',
'TODAY',
'R1',
'R2',
'R3',
'R4',
'TOT')]
# Rename variables
names(pos_table) <- c('Player',
'Position',
'THRU',
'To Par',
'Today',
'R1',
'R2',
'R3',
'R4',
'Total')
# Adjust variables
pos_table$Position <- as.factor(pos_table$Position)
pos_table$`Sort Pos` <- as.numeric(gsub("^T",'', pos_table$Position))
pos_table$Day_THRU <- day_fin
View(pos_table)
get_trny_pos <- function(id_num){
# Get html
url <- paste('http://espn.go.com/golf/leaderboard?tournamentId=', id_num, sep = '')
html_text <- GET(url)
html_text <- content(html_text, as = 'text')
parsed_html <- htmlParse(html_text, asText = TRUE)
# Extract table statistics and header
pos_header <- xpathSApply(parsed_html, '//*[(@id = "regular-leaderboard")]//th', xmlValue)
pos_header <- make.names(pos_header)
pos_table <- xpathSApply(parsed_html, '//*[(@id = "regular-leaderboard")]//td', xmlValue)
# Get finish results
# Check for and remove projected cut and cut information
if(length(grep('Cut:', pos_table)) > 0){
cut_idx <- grep('Cut:', pos_table)
proj_cut <- pos_table[cut_idx]
proj_cut <- unlist(str_split(proj_cut, ': '))
proj_cut_stroke <- proj_cut[2]
pos_table <- pos_table[-cut_idx]
}else{
cut_idx <- NA
}
# Form table
pos_table <- data.frame(matrix(data = pos_table,
ncol = length(pos_header),
byrow = T),
stringsAsFactors = F)
names(pos_table) <- pos_header
# Check is tournament is ongoing and Adjust THRU stat
if("THRU" %in% pos_header == F){
trn_ongoing <- F
pos_table$THRU <- 72
day_fin <- 'F'
}else{
trn_ongoing <- T
day_fin <- 0
}
if("TODAY" %in% pos_header == F){
pos_table$TODAY <- '-'
}
# Subset Table
pos_table <- pos_table[,c('PLAYER',
'POS',
'THRU',
'TO.PAR',
'TODAY',
'R1',
'R2',
'R3',
'R4',
'TOT')]
# Rename variables
names(pos_table) <- c('Player',
'Position',
'THRU',
'To Par',
'Today',
'R1',
'R2',
'R3',
'R4',
'Total')
# Adjust variables
pos_table$Position <- as.factor(pos_table$Position)
pos_table$`Sort Pos` <- as.numeric(gsub("^T",'', pos_table$Position))
pos_table$Day_THRU <- day_fin
# If tournament is ongoing, adjust THRU information to account for rounds played
if(trn_ongoing){
for(idx in 1:nrow(pos_table)){
rnd_chk <- pos_table[idx, c('To Par', 'THRU', 'R1', 'R2', 'R3', 'R4')]
cur_rnd <- rnd_chk[,'THRU']
CUT_chk <- ('CUT' %in% rnd_chk[,c('To Par', 'THRU')] || 'WD' %in% rnd_chk[,'THRU'] || 'DQ' %in% rnd_chk[,'THRU'])
# Check if current round complete
if(grepl("F|WD|AM|PM|DQ|CUT", cur_rnd)){cur_rnd <- 0}
Round_lnth <- length(grep('[0-9]', rnd_chk[,c(3:ncol(rnd_chk))]))
aggr_fin <- Round_lnth*18 + as.integer(cur_rnd)
if(Round_lnth*18 == aggr_fin){
day_fin <- 'F'
}else{
day_fin <- aggr_fin %% 18}
# If player is CUT, adjust `To Par`
if(CUT_chk){pos_table[idx, 'To Par'] <- 'CUT'}
pos_table[idx, 'THRU'] <- as.character(aggr_fin)
pos_table[idx, 'Day_THRU'] <- as.character(day_fin)
}
}
# Re-sort Table
pos_table <- pos_table[,c('Player',
'Position',
'Sort Pos',
'Day_THRU',
'To Par',
'Today',
'R1',
'R2',
'R3',
'R4',
'THRU',
'Total')]
pos_table
}
cur_trny_pos <- suppressWarnings(get_trny_pos(id_num))
cur_trny_pos <- subset(cur_trny_pos, `To Par` != 'CUT')
cur_trny_strokes <- as.integer(gsub('E', '0', cur_trny_pos$`To Par`))
# Establish parameters for optimization function
stroke_delta <- rep(0, length(cur_trny_strokes))
# Determine upper and low bounds based on holes through
if(est_bound){
lower <- -ceiling((lb/18) * (72 - as.integer(cur_trny_pos$THRU)))
upper <- ceiling((ub/18) * (72 - as.integer(cur_trny_pos$THRU)))
}else{
lower <- rep(-lb,length(stroke_delta))
upper <- rep(ub,length(stroke_delta))
}
# Check to make sure the tournament is in progress and optimize
lower
optim_info <- optimx(stroke_delta,
simulate_pool_change,
cur_trny_pos = cur_trny_pos,
cur_trny_strokes = cur_trny_strokes,
entry_name = entry_name,
method = 'nmkb',
lower = lower,
upper = upper)
upper
debug(optimx)
optim_info <- optimx(stroke_delta,
simulate_pool_change,
cur_trny_pos = cur_trny_pos,
cur_trny_strokes = cur_trny_strokes,
entry_name = entry_name,
method = 'nmkb',
lower = lower,
upper = upper)
optim_info <- optimx(stroke_delta,
simulate_pool_change,
cur_trny_pos = cur_trny_pos,
cur_trny_strokes = cur_trny_strokes,
entry_name = entry_name,
method = 'nmkb',
lower = lower,
upper = upper)
sp <- simulate_pool_change(stroke_delta, cur_trny_pos, cur_trny_strokes, entry_name)
sp
entry_name <- 'Cage to the Face'
est_bound <- T
lb <- 3
ub <- 3
debug(optimx)
cur_trny_pos <- suppressWarnings(get_trny_pos(id_num))
cur_trny_pos <- subset(cur_trny_pos, `To Par` != 'CUT')
cur_trny_strokes <- as.integer(gsub('E', '0', cur_trny_pos$`To Par`))
# Establish parameters for optimization function
stroke_delta <- rep(0, length(cur_trny_strokes))
# Determine upper and low bounds based on holes through
if(est_bound){
lower <- -ceiling((lb/18) * (72 - as.integer(cur_trny_pos$THRU)))
upper <- ceiling((ub/18) * (72 - as.integer(cur_trny_pos$THRU)))
}else{
lower <- rep(-lb,length(stroke_delta))
upper <- rep(ub,length(stroke_delta))
}
stroke_delta
str(stroke_delta)
View(cur_trny_pos)
str(cur_trny_strokes)
cur_trny_strokes
lower
upper
ign_idx <- which(lower == 0)
upper[ign_idx]
1:length(lower)
length(ign_idx)
length(ign_idx) == 0
ign_idx <- which(lower != 0)
keep_idx <- which(lower != 0)
if(length(keep_idx) == 0){
keep_idx <- which(lower != 0)
entry_name <- 'Cage to the Face'
est_bound <- T
lb <- 3
ub <- 3
cur_trny_pos <- suppressWarnings(get_trny_pos(id_num))
cur_trny_pos <- subset(cur_trny_pos, `To Par` != 'CUT')
cur_trny_strokes <- as.integer(gsub('E', '0', cur_trny_pos$`To Par`))
# Establish parameters for optimization function
stroke_delta <- rep(0, length(cur_trny_strokes))
# Determine upper and low bounds based on holes through
if(est_bound){
lower <- -ceiling((lb/18) * (72 - as.integer(cur_trny_pos$THRU)))
upper <- ceiling((ub/18) * (72 - as.integer(cur_trny_pos$THRU)))
}else{
lower <- rep(-lb,length(stroke_delta))
upper <- rep(ub,length(stroke_delta))
}
keep_idx <- which(lower != 0)
keep_idx <- which(lower == 0)
ign_idx <- which(lower == 0)
ign_idx
lower[ign_idx] <- NA
upper[ign_idx] <- NA
lower
optim_info <- optimx(stroke_delta,
simulate_pool_change,
cur_trny_pos = cur_trny_pos,
cur_trny_strokes = cur_trny_strokes,
entry_name = entry_name,
method = 'nmkb',
lower = lower,
upper = upper)
t <- c(1,1,1,1,1,1,1,1,1,1,1,1)
c <- c(-2,-3,6,4)
id <- c(2,5,6,10)
t[id] <- t[id] + c
t
simulate_pool_change <- function(stroke_delta, cur_trny_pos, cur_trny_strokes, entry_name, keep_idx = 1:length(stroke_delta)){
# Get revised standings/winnings for player based on stroke delta
stroke_delta <- ceiling(stroke_delta)
temp_trny_ranks <- simulate_trny_pos_change(stroke_delta, cur_trny_pos, cur_trny_strokes, keep_idx)
temp_pool_ranks <- update_pool_ranks(temp_trny_ranks, entries)
entry_pool_rank <- temp_pool_ranks$Rank[which(temp_pool_ranks$Entry == entry_name)]
entry_pool_rank
}
simulate_trny_pos_change <- function(stroke_delta, cur_trny_pos, cur_trny_strokes, keep_idx = 1:length(stroke_delta)){
# Change player strokes and determine new ranking
new_strokes <- cur_trny_strokes
new_strokes[keep_idx] <- new_strokes[keep_idx] + stroke_delta
# Prevent two first places
first_place <- which(new_strokes == min(new_strokes))
if(length(first_place) > 1){
second_place <- first_place[-1]
new_strokes[second_place] <- new_strokes[second_place] + 1
}
# Determine new ranking
new_ranks <- rank(new_strokes, ties.method = 'min')
new_trny_pos_money <- get_trny_pos_money(new_ranks, payouts)
# Change new_trny_pos_money rankings from factor to integer
new_trny_pos_money$position_list <- as.numeric(levels(new_trny_pos_money$position_list))
# Update Player Positions based on new ranks and expected winnings
new_trny_pos <- cur_trny_pos
new_trny_pos$Position <- as.integer(new_ranks)
new_trny_pos$`To Par` <- new_strokes
new_trny_ranks <- left_join(new_trny_pos, new_trny_pos_money, by = c('Position' = 'position_list'))
new_trny_ranks
}
entry_name <- 'Cage to the Face'
est_bound <- T
lb <- 3
ub <- 3
undebug(optimx)
cur_trny_pos <- suppressWarnings(get_trny_pos(id_num))
cur_trny_pos <- subset(cur_trny_pos, `To Par` != 'CUT')
cur_trny_strokes <- as.integer(gsub('E', '0', cur_trny_pos$`To Par`))
# Establish parameters for optimization function
stroke_delta <- rep(0, length(cur_trny_strokes))
# Determine upper and low bounds based on holes through
if(est_bound){
lower <- -ceiling((lb/18) * (72 - as.integer(cur_trny_pos$THRU)))
upper <- ceiling((ub/18) * (72 - as.integer(cur_trny_pos$THRU)))
}else{
lower <- rep(-lb,length(stroke_delta))
upper <- rep(ub,length(stroke_delta))
}
keep_idx <- which(lower != 0)
lower[keep_idx]
upper[keep_idx]
stroke_delta[keep_idx]
optim_info <- optimx(stroke_delta[keep_idx],
simulate_pool_change,
cur_trny_pos = cur_trny_pos,
cur_trny_strokes = cur_trny_strokes,
entry_name = entry_name,
keep_idx = keep_idx,
method = 'nmkb',
lower = lower[keep_idx],
upper = upper[keep_idx])
optim_info
best_optim1 <- data.frame(optim_info)
best_rank1 <- best_optim1$value
best_rank1
new_strokes <- as.integer(round(best_optim1[, c(1:length(stroke_delta))]))
best_optim1
new_strokes <- as.integer(round(best_optim1[, c(1:length(stroke_delta))]))
best_optim1
1:length(stroke_delta))
1:length(stroke_delta))
length(stroke_delta)
new_strokes <- as.integer(round(best_optim1[, c(1:length(keep_idx))]))
new_strokes
lower[keep_idx] <- lower[keep_idx] - new_strokes
upper[keep_idx] <- upper[keep_idx] - new_strokes
lower
new_trny_ranks <- simulate_trny_pos_change(new_strokes, cur_trny_pos, cur_trny_strokes)
new_trny_ranks <- new_trny_ranks[, names(cur_trny_pos)]
new_trny_ranks$Position <- as.factor(new_trny_ranks$Position)
optim_info2 <- optimx(stroke_delta[keep_idx],
simulate_pool_change,
cur_trny_pos = new_trny_ranks,
cur_trny_strokes = new_trny_ranks$`To Par`,
entry_name = entry_name,
keep_idx = keep_idx,
method = c('spg', 'nmkb'),
lower = lower[keep_idx],
upper = upper[keep_idx])
best_optim2
best_optim2 <- data.frame(optim_info2)
best_optim2
best_rank_idx2 <- which(best_optim2$value == min(best_optim2$value))[1]
best_rank2 <- best_optim2$value[best_rank_idx2]
new_strokes <- new_strokes + as.integer(round(best_optim2[best_rank_idx2, c(1:length(keep_idx))]))
optim_info <- optim_info2
optim_info
new_strokes
new_trny_ranks <- simulate_trny_pos_change(new_strokes, cur_trny_pos, cur_trny_strokes, keep_idx)
new_trny_ranks
new_pool_ranks <- update_pool_ranks(new_trny_ranks, entries)
View(new_pool_ranks)
new_trny_ranks$Pos_Moved <- new_trny_ranks$`Sort Pos` - new_trny_ranks$Position
new_trny_ranks <- new_trny_ranks[,c('Player',
'Position',
'Pos_Moved',
'Sort Pos',
'proj_cash')]
names(new_trny_ranks) <- c('PLAYER NAME', 'Best Case Position', 'Positions Moved', 'Current Position', 'Best Case Cash')
new_trny_ranks <- new_trny_ranks[order(new_trny_ranks$`Best Case Position`),]
new_entry_rank <- simulate_pool_change(new_strokes, cur_trny_pos, cur_trny_strokes, entry_name)
new_entry_rank <- simulate_pool_change(new_strokes, cur_trny_pos, cur_trny_strokes, entry_name, keep_idx)
new_entry_rank
optimize_pool_entry <- function(entry_name, id_num, lb = 3, ub = 3, est_bound = F){
# Clean up initial player positions
cur_trny_pos <- suppressWarnings(get_trny_pos(id_num))
cur_trny_pos <- subset(cur_trny_pos, `To Par` != 'CUT')
cur_trny_strokes <- as.integer(gsub('E', '0', cur_trny_pos$`To Par`))
# Establish parameters for optimization function
stroke_delta <- rep(0, length(cur_trny_strokes))
# Determine upper and low bounds based on holes through
if(est_bound){
lower <- -ceiling((lb/18) * (72 - as.integer(cur_trny_pos$THRU)))
upper <- ceiling((ub/18) * (72 - as.integer(cur_trny_pos$THRU)))
}else{
lower <- rep(-lb,length(stroke_delta))
upper <- rep(ub,length(stroke_delta))
}
# Check to make sure the tournament is in progress and optimize
if(sum(lower) == 0 && sum(upper) == 0 ){
message('Tournament Complete, nothing returned')
optim_list <- NULL
}else{
keep_idx <- which(lower != 0)
optim_info <- optimx(stroke_delta[keep_idx],
simulate_pool_change,
cur_trny_pos = cur_trny_pos,
cur_trny_strokes = cur_trny_strokes,
entry_name = entry_name,
keep_idx = keep_idx,
method = 'nmkb',
lower = lower[keep_idx],
upper = upper[keep_idx])
# Record best rank
best_optim1 <- data.frame(optim_info)
best_rank1 <- best_optim1$value
# Rerun optimization to see if better result can be found
new_strokes <- as.integer(round(best_optim1[, c(1:length(keep_idx))]))
lower[keep_idx] <- lower[keep_idx] - new_strokes
upper[keep_idx] <- upper[keep_idx] - new_strokes
new_trny_ranks <- simulate_trny_pos_change(new_strokes, cur_trny_pos, cur_trny_strokes)
new_trny_ranks <- new_trny_ranks[, names(cur_trny_pos)]
new_trny_ranks$Position <- as.factor(new_trny_ranks$Position)
optim_info2 <- optimx(stroke_delta[keep_idx],
simulate_pool_change,
cur_trny_pos = new_trny_ranks,
cur_trny_strokes = new_trny_ranks$`To Par`,
entry_name = entry_name,
keep_idx = keep_idx,
method = c('spg', 'nmkb'),
lower = lower[keep_idx],
upper = upper[keep_idx])
# Record best rank
best_optim2 <- data.frame(optim_info2)
best_rank_idx2 <- which(best_optim2$value == min(best_optim2$value))[1]
best_rank2 <- best_optim2$value[best_rank_idx2]
# Compare ranks and take the optimal
if(best_rank2 < best_rank1){
new_strokes <- new_strokes + as.integer(round(best_optim2[best_rank_idx2, c(1:length(keep_idx))]))
optim_info <- optim_info2
}
# Run optimal case and return player positions and pool rankings
new_trny_ranks <- simulate_trny_pos_change(new_strokes, cur_trny_pos, cur_trny_strokes, keep_idx)
new_pool_ranks <- update_pool_ranks(new_trny_ranks, entries)
new_trny_ranks$Pos_Moved <- new_trny_ranks$`Sort Pos` - new_trny_ranks$Position
new_trny_ranks <- new_trny_ranks[,c('Player',
'Position',
'Pos_Moved',
'Sort Pos',
'proj_cash')]
names(new_trny_ranks) <- c('PLAYER NAME', 'Best Case Position', 'Positions Moved', 'Current Position', 'Best Case Cash')
new_trny_ranks <- new_trny_ranks[order(new_trny_ranks$`Best Case Position`),]
new_entry_rank <- simulate_pool_change(new_strokes, cur_trny_pos, cur_trny_strokes, entry_name, keep_idx)
optim_list <- list(new_strokes = new_strokes,
new_trny_ranks = new_trny_ranks,
new_pool_ranks = new_pool_ranks,
new_entry_rank = new_entry_rank,
optim_info = optim_info)
}
optim_list
}
op <- optimize_pool_entry(entry_name, id_num, 3, 3, est_bound = T)
op
runApp()
runApp()
